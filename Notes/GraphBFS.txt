Breadth-first search (BFS) explores notes and edges of a graph.

Time complexity: O(V+E) Useful for finding shortest path on unweighted graphs

BFS starts at an arbitrary node and explores in a layered fashion through a queue of which node it should visit next. Keep a set of visited nodes. In the case of Leetcode 417, we keep track of visited "nodes" via an array[][].

Use a QUEUE!!!

Ex: A graph, visited array and a queue.
1. Push starting node 0 into queue. Mark it as visited in the array.
2. Remove node 0 from the queue. Visit node 0's unvisited neighbors, which are 1 and 2, and add them to queue.
3. Remove node 1 from queue. Visit node 1's unvisited neighbors. Because there are none, don't add anything to queue.
4. Remove node 2 from queue. Visit node 2's unvisited neighbors. Because there are none, don't add anything to queue.

For DFS, steps are same, except that we use a stack instead of a queue.



Dijkstra's algorithm is an algorithm used to find the shortest path between a starting node and all other nodes in a weighted graph, 
essentially calculating the shortest distance from one point to every other point in a network, like a road map, 
by iteratively selecting the closest unvisited node and updating distances based on its connections; 
it works best when all edge weights are non-negative.

function Dijkstra(Graph, source):
    Initialize dist[] array with ∞, except dist[source] = 0
    Initialize a priority queue (min-heap) with (source, 0)

    while priorityQueue is not empty:
        currentNode ← priorityQueue.pop()  # Node with the smallest distance
        for each neighbor of currentNode:
            edgeWeight = weight(currentNode, neighbor)
            tentativeDist = dist[currentNode] + edgeWeight
            if tentativeDist < dist[neighbor]:  # Found a shorter path
                dist[neighbor] = tentativeDist
                priorityQueue.push((neighbor, dist[neighbor]))
    
    return dist